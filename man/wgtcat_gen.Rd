% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/spatial_manipulation.R, R/weight_categories.R
\name{wgtcat_gen}
\alias{wgtcat_gen}
\title{Generate weight category polygons}
\usage{
wgtcat_gen(
  reportingunit,
  reportingunit_path = NULL,
  sdd_path,
  lmf_strata = NULL,
  lmf_path = NULL,
  pointvisits = NULL,
  pointvisits_path = NULL,
  output = "sf",
  verbose = FALSE
)

wgtcat_gen(
  reportingunit,
  reportingunit_path = NULL,
  sdd_path,
  lmf_strata = NULL,
  lmf_path = NULL,
  pointvisits = NULL,
  pointvisits_path = NULL,
  output = "sf",
  verbose = FALSE
)
}
\arguments{
\item{reportingunit}{An sf polygons object, Spatial Polygons Data Frame, or character string. If a character string, it must be the name of a polygon feature class found in \code{reportingunit_path}. Regardless, the feature class must contain exactly one feature representing a single reporting unit.}

\item{reportingunit_path}{Optional character string. The filepath to the folder or geodatabase containing the feature class specified with the character string \code{reportingunit}. Not necessary if \code{reportingunit} is either an sf polygon object or Spatial Polygons Data Frame. Defaults to \code{NULL}.}

\item{sdd_path}{Character string. The full filepath to the sample design database (SDD), including .GDB file extension. The SDD must follow the standard schema, including the feature classes: TerrestrialPointEvaluation, TerrestrialSamplePoints, TerrestrialStrata, and TerrestrialSampleFrame.}

\item{lmf_strata}{Optional sf polygons object, Spatial Polygons Data Frame, or character string. If a character string, it must be the name of a polygon feature class found in \code{reportingunit_path}. Regardless, the feature class must contain exactly one feature representing a single reporting unit. Defaults to \code{NULL}.}

\item{lmf_path}{Optional character string. If the weight categories need to account for the Landscape Monitoring Framework (LMF) strata, this must be the full filepath, including file extension, to the geodatabase containing the strata feature class with the LMF strata.}

\item{pointvisits}{Optional sf points object, Spatial Points Data Frame, or character string. If a character string, it must be the name of a point feature class found in \code{pointvisits_path}. Regardless, the feature class must contain the points to be considered and in the same format as the feature class TerrestrailPointEvaluation. This would only be used if you have already restricted which point evaluations should be considered for this process; otherwise, leave \code{NULL} and use the full set of points in the sample design database defined by \code{sdd_path}. Defaults to \code{NULL}.}

\item{pointvisits_path}{Optional character string. If \code{pointvisits} is a character string naming a feature class then this must be the path to the folder or geodatabase containing that feature class. Defaults to \code{NULL}.}

\item{output}{Character string. Determines the output format and must be either \code{"sf"} for an sf object or \code{"spdf"} for a Spatial Polygons Data Frame. Defaults to \code{"sf"}}

\item{verbose}{Logical. If \code{TRUE} then diagnostic messages will be returned throughout processing. Defaults to \code{FALSE}.}

\item{polygons}{List of spatial polygons data frames. These are the polygons to intersect and should be the same as the polygons used to draw the designs being combined. They must all have a the \code{idvar} variable containing the identities of the individual polygons (e.g. stratum). If you are combining designs that used the same polygons (e.g. two different designs using the exact same sample frame and stratification) ONLY INCLUDE ONE OF THEM. Including duplicates can result in very, very long processing times and failed intersections. They will be intersected sequentially in order, so there may be some slight speed gains if they're sorted smallest to largest, but no guarantees.}

\item{idvar}{Character string. The name of the variable found in every set of polygons that contains the polygon identities.}

\item{makevalid}{Logical. If \code{TRUE} then the function \code{repair_geometry()} will be applied to the product of every geoprocessing step. If \code{FALSE} then there will be no validity checks. It is STRONGLY recommended that you use \code{TRUE} Defaults to \code{TRUE}.}

\item{force}{Logical. This is passed to \code{repair_geometry()} if \code{makevalid = TRUE}. If \code{TRUE} this will force the function to attempt to repair geometry even if there are no errors. This is for the paranoid. Defaults to \code{FALSE}.}

\item{use_spherical_geometry}{Logical. USE AT YOUR OWN RISK. Controls if sf uses spherical geometry or not. For particularly wonky sf objects, this may be necessary to effect any kind of repair but can have unintended consequences for the resulting geometry. If \code{TRUE} then \code{sf::sf_use_s2()} will be set to \code{TRUE} which is the default for the package. Defaults to \code{TRUE}.}

\item{scale}{Numeric. A value to be passed to \code{rgeos::setScale()} to use for the steps of this function. It will be returned to the previous value before the function returns its output. Defaults to \code{1e5} (precision to five decimal places).}
}
\value{
A spatial polygons data frame with the single variable \code{"wgt_cat"} in the data slot containing the unique weight categories.

An sf polygon or Spatial Polygons Data Frame object with the attributes "unique_id" and "area_ha" (area in hectares) projected in Albers Equal Area Conic
}
\description{
Create weight category polygons from the intersection of multiple spatial polygons data frames. When combining overlapping designs, weight categories are the unique combinations of the sample frame (or stratification) identities from the designs. This takes a list of spatial polygons data frames which have a common variable containing their unique weighting identifier (e.g. three stratification schemes that all contain a variable named "wgt_cat" that holds the stratum identities) and intersects them to find the weight categories. This is extremely vulnerable to malformed/invalid geometry and so it is highly recommended that you use the argument \code{makevalid = TRUE} to prompt the function to check and attempt to repair geometry as needed after every geoprocessing step. This is slower, but the intersections will almost certainly fail without it. If you are feeling especially paranoid, you can also use \code{force = TRUE} to force repair actions even on valid geometry.

This will take a reporting unit polygon and produce weight category polygons for it using an appropriately formatted sample design database and, optionally, Landscape Management Framework (LMF) stratification polygons. Please note that all input polygons MUST be dissolved by their unique identifiers before use.
}
